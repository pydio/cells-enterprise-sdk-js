/**
 * Pydio Cells Enterprise Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthOAuth2ClientConfig from '../model/AuthOAuth2ClientConfig';
import AuthOAuth2ConnectorCollection from '../model/AuthOAuth2ConnectorCollection';
import AuthOAuth2ConnectorConfig from '../model/AuthOAuth2ConnectorConfig';
import EntDeleteVersioningPolicyResponse from '../model/EntDeleteVersioningPolicyResponse';
import EntDeleteVirtualNodeResponse from '../model/EntDeleteVirtualNodeResponse';
import EntExternalDirectoryCollection from '../model/EntExternalDirectoryCollection';
import EntExternalDirectoryConfig from '../model/EntExternalDirectoryConfig';
import EntExternalDirectoryResponse from '../model/EntExternalDirectoryResponse';
import EntListSitesResponse from '../model/EntListSitesResponse';
import EntOAuth2ClientCollection from '../model/EntOAuth2ClientCollection';
import EntOAuth2ClientResponse from '../model/EntOAuth2ClientResponse';
import EntOAuth2ConnectorCollection from '../model/EntOAuth2ConnectorCollection';
import EntOAuth2ConnectorResponse from '../model/EntOAuth2ConnectorResponse';
import TreeNode from '../model/TreeNode';
import TreeVersioningPolicy from '../model/TreeVersioningPolicy';

/**
* EnterpriseConfigService service.
* @module api/EnterpriseConfigServiceApi
* @version 2.0
*/
export default class EnterpriseConfigServiceApi {

    /**
    * Constructs a new EnterpriseConfigServiceApi. 
    * @alias module:api/EnterpriseConfigServiceApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * [Enterprise Only] Delete external directory
     * @param {String} configId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntExternalDirectoryResponse} and HTTP response
     */
    deleteExternalDirectoryWithHttpInfo(configId) {
      let postBody = null;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteExternalDirectory");
      }


      let pathParams = {
        'ConfigId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntExternalDirectoryResponse;

      return this.apiClient.callApi(
        '/config/directories/{ConfigId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Delete external directory
     * @param {String} configId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntExternalDirectoryResponse}
     */
    deleteExternalDirectory(configId) {
      return this.deleteExternalDirectoryWithHttpInfo(configId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Delete an oauth2 client
     * @param {String} clientID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntOAuth2ClientResponse} and HTTP response
     */
    deleteOAuth2ClientWithHttpInfo(clientID) {
      let postBody = null;

      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling deleteOAuth2Client");
      }


      let pathParams = {
        'ClientID': clientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntOAuth2ClientResponse;

      return this.apiClient.callApi(
        '/config/oauth2clients/{ClientID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Delete an oauth2 client
     * @param {String} clientID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntOAuth2ClientResponse}
     */
    deleteOAuth2Client(clientID) {
      return this.deleteOAuth2ClientWithHttpInfo(clientID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Delete an oauth2 client
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntOAuth2ConnectorResponse} and HTTP response
     */
    deleteOAuth2ConnectorWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOAuth2Connector");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntOAuth2ConnectorResponse;

      return this.apiClient.callApi(
        '/config/oauth2connectors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Delete an oauth2 client
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntOAuth2ConnectorResponse}
     */
    deleteOAuth2Connector(id) {
      return this.deleteOAuth2ConnectorWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Delete a versioning policy
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDeleteVersioningPolicyResponse} and HTTP response
     */
    deleteVersioningPolicyWithHttpInfo(uuid) {
      let postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteVersioningPolicy");
      }


      let pathParams = {
        'Uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntDeleteVersioningPolicyResponse;

      return this.apiClient.callApi(
        '/config/versioning/{Uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Delete a versioning policy
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDeleteVersioningPolicyResponse}
     */
    deleteVersioningPolicy(uuid) {
      return this.deleteVersioningPolicyWithHttpInfo(uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Delete a virtual node
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDeleteVirtualNodeResponse} and HTTP response
     */
    deleteVirtualNodeWithHttpInfo(uuid) {
      let postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteVirtualNode");
      }


      let pathParams = {
        'Uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntDeleteVirtualNodeResponse;

      return this.apiClient.callApi(
        '/config/virtualnodes/{Uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Delete a virtual node
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDeleteVirtualNodeResponse}
     */
    deleteVirtualNode(uuid) {
      return this.deleteVirtualNodeWithHttpInfo(uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] List additional user directories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntExternalDirectoryCollection} and HTTP response
     */
    listExternalDirectoriesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntExternalDirectoryCollection;

      return this.apiClient.callApi(
        '/config/directories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] List additional user directories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntExternalDirectoryCollection}
     */
    listExternalDirectories() {
      return this.listExternalDirectoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] List oauth2 clients
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntOAuth2ClientCollection} and HTTP response
     */
    listOAuth2ClientsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntOAuth2ClientCollection;

      return this.apiClient.callApi(
        '/config/oauth2clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] List oauth2 clients
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntOAuth2ClientCollection}
     */
    listOAuth2Clients() {
      return this.listOAuth2ClientsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] List oauth2 connectors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntOAuth2ConnectorCollection} and HTTP response
     */
    listOAuth2ConnectorsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntOAuth2ConnectorCollection;

      return this.apiClient.callApi(
        '/config/oauth2connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] List oauth2 connectors
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntOAuth2ConnectorCollection}
     */
    listOAuth2Connectors() {
      return this.listOAuth2ConnectorsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] List configured sites
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntListSitesResponse} and HTTP response
     */
    listSitesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntListSitesResponse;

      return this.apiClient.callApi(
        '/config/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] List configured sites
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntListSitesResponse}
     */
    listSites() {
      return this.listSitesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Add/Create an external directory
     * @param {String} configId 
     * @param {module:model/EntExternalDirectoryConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntExternalDirectoryResponse} and HTTP response
     */
    putExternalDirectoryWithHttpInfo(configId, body) {
      let postBody = body;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling putExternalDirectory");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExternalDirectory");
      }


      let pathParams = {
        'ConfigId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntExternalDirectoryResponse;

      return this.apiClient.callApi(
        '/config/directories/{ConfigId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Add/Create an external directory
     * @param {String} configId 
     * @param {module:model/EntExternalDirectoryConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntExternalDirectoryResponse}
     */
    putExternalDirectory(configId, body) {
      return this.putExternalDirectoryWithHttpInfo(configId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Add/Create a new oauth2 client
     * @param {String} clientID 
     * @param {module:model/AuthOAuth2ClientConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntOAuth2ClientResponse} and HTTP response
     */
    putOAuth2ClientWithHttpInfo(clientID, body) {
      let postBody = body;

      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling putOAuth2Client");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOAuth2Client");
      }


      let pathParams = {
        'ClientID': clientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntOAuth2ClientResponse;

      return this.apiClient.callApi(
        '/config/oauth2clients/{ClientID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Add/Create a new oauth2 client
     * @param {String} clientID 
     * @param {module:model/AuthOAuth2ClientConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntOAuth2ClientResponse}
     */
    putOAuth2Client(clientID, body) {
      return this.putOAuth2ClientWithHttpInfo(clientID, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Add/Create a new oauth2 client
     * @param {String} id 
     * @param {module:model/AuthOAuth2ConnectorConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntOAuth2ConnectorResponse} and HTTP response
     */
    putOAuth2ConnectorWithHttpInfo(id, body) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOAuth2Connector");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOAuth2Connector");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntOAuth2ConnectorResponse;

      return this.apiClient.callApi(
        '/config/oauth2connectors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Add/Create a new oauth2 client
     * @param {String} id 
     * @param {module:model/AuthOAuth2ConnectorConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntOAuth2ConnectorResponse}
     */
    putOAuth2Connector(id, body) {
      return this.putOAuth2ConnectorWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Add/Create a new oauth2 client
     * @param {module:model/AuthOAuth2ConnectorCollection} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntOAuth2ConnectorResponse} and HTTP response
     */
    putOAuth2ConnectorsWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOAuth2Connectors");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntOAuth2ConnectorResponse;

      return this.apiClient.callApi(
        '/config/oauth2connectors', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Add/Create a new oauth2 client
     * @param {module:model/AuthOAuth2ConnectorCollection} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntOAuth2ConnectorResponse}
     */
    putOAuth2Connectors(body) {
      return this.putOAuth2ConnectorsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Create or update a versioning policy
     * @param {String} uuid 
     * @param {module:model/TreeVersioningPolicy} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeVersioningPolicy} and HTTP response
     */
    putVersioningPolicyWithHttpInfo(uuid, body) {
      let postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling putVersioningPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putVersioningPolicy");
      }


      let pathParams = {
        'Uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeVersioningPolicy;

      return this.apiClient.callApi(
        '/config/versioning/{Uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Create or update a versioning policy
     * @param {String} uuid 
     * @param {module:model/TreeVersioningPolicy} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeVersioningPolicy}
     */
    putVersioningPolicy(uuid, body) {
      return this.putVersioningPolicyWithHttpInfo(uuid, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Create or update a virtual node
     * @param {String} uuid 
     * @param {module:model/TreeNode} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeNode} and HTTP response
     */
    putVirtualNodeWithHttpInfo(uuid, body) {
      let postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling putVirtualNode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putVirtualNode");
      }


      let pathParams = {
        'Uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeNode;

      return this.apiClient.callApi(
        '/config/virtualnodes/{Uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Create or update a virtual node
     * @param {String} uuid 
     * @param {module:model/TreeNode} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeNode}
     */
    putVirtualNode(uuid, body) {
      return this.putVirtualNodeWithHttpInfo(uuid, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
