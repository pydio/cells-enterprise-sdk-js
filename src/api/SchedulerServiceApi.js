/**
 * Pydio Cells Enterprise Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntDeleteActionTemplateResponse from '../model/EntDeleteActionTemplateResponse';
import EntDeleteJobTemplateResponse from '../model/EntDeleteJobTemplateResponse';
import EntDeleteSelectorTemplateResponse from '../model/EntDeleteSelectorTemplateResponse';
import EntDocTemplatesResponse from '../model/EntDocTemplatesResponse';
import EntListActionTemplatesRequest from '../model/EntListActionTemplatesRequest';
import EntListActionTemplatesResponse from '../model/EntListActionTemplatesResponse';
import EntListJobTemplatesRequest from '../model/EntListJobTemplatesRequest';
import EntListJobTemplatesResponse from '../model/EntListJobTemplatesResponse';
import EntListSelectorTemplatesRequest from '../model/EntListSelectorTemplatesRequest';
import EntListSelectorTemplatesResponse from '../model/EntListSelectorTemplatesResponse';
import EntPlaygroundRequest from '../model/EntPlaygroundRequest';
import EntPlaygroundResponse from '../model/EntPlaygroundResponse';
import EntPutActionTemplateRequest from '../model/EntPutActionTemplateRequest';
import EntPutActionTemplateResponse from '../model/EntPutActionTemplateResponse';
import EntPutJobTemplateRequest from '../model/EntPutJobTemplateRequest';
import EntPutJobTemplateResponse from '../model/EntPutJobTemplateResponse';
import EntPutSelectorTemplateRequest from '../model/EntPutSelectorTemplateRequest';
import EntPutSelectorTemplateResponse from '../model/EntPutSelectorTemplateResponse';
import JobsDeleteJobResponse from '../model/JobsDeleteJobResponse';
import JobsPutJobRequest from '../model/JobsPutJobRequest';
import JobsPutJobResponse from '../model/JobsPutJobResponse';
import RpcStatus from '../model/RpcStatus';

/**
* SchedulerService service.
* @module api/SchedulerServiceApi
* @version 2.0
*/
export default class SchedulerServiceApi {

    /**
    * Constructs a new SchedulerServiceApi. 
    * @alias module:api/SchedulerServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Templates management for actions
     * @param {String} templateName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDeleteActionTemplateResponse} and HTTP response
     */
    deleteActionTemplateWithHttpInfo(templateName) {
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteActionTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntDeleteActionTemplateResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/actions/{TemplateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for actions
     * @param {String} templateName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDeleteActionTemplateResponse}
     */
    deleteActionTemplate(templateName) {
      return this.deleteActionTemplateWithHttpInfo(templateName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Delete a job from the scheduler
     * @param {String} jobID 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cleanableJobs 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobsDeleteJobResponse} and HTTP response
     */
    deleteJobWithHttpInfo(jobID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobID' is set
      if (jobID === undefined || jobID === null) {
        throw new Error("Missing the required parameter 'jobID' when calling deleteJob");
      }

      let pathParams = {
        'JobID': jobID
      };
      let queryParams = {
        'CleanableJobs': opts['cleanableJobs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobsDeleteJobResponse;
      return this.apiClient.callApi(
        '/scheduler/jobs/{JobID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * [Enterprise Only] Delete a job from the scheduler
     * @param {String} jobID 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cleanableJobs 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobsDeleteJobResponse}
     */
    deleteJob(jobID, opts) {
      return this.deleteJobWithHttpInfo(jobID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for Jobs
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDeleteJobTemplateResponse} and HTTP response
     */
    deleteJobTemplateWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteJobTemplate");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntDeleteJobTemplateResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/jobs/{Name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for Jobs
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDeleteJobTemplateResponse}
     */
    deleteJobTemplate(name) {
      return this.deleteJobTemplateWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for filters
     * @param {String} templateName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDeleteSelectorTemplateResponse} and HTTP response
     */
    deleteSelectorTemplateWithHttpInfo(templateName) {
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteSelectorTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntDeleteSelectorTemplateResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/selectors/{TemplateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for filters
     * @param {String} templateName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDeleteSelectorTemplateResponse}
     */
    deleteSelectorTemplate(templateName) {
      return this.deleteSelectorTemplateWithHttpInfo(templateName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a code sample
     * @param {module:model/EntPlaygroundRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntPlaygroundResponse} and HTTP response
     */
    executePlaygroundCodeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling executePlaygroundCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntPlaygroundResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/playground', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Run a code sample
     * @param {module:model/EntPlaygroundRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntPlaygroundResponse}
     */
    executePlaygroundCode(body) {
      return this.executePlaygroundCodeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for actions
     * @param {module:model/EntListActionTemplatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntListActionTemplatesResponse} and HTTP response
     */
    listActionTemplatesWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listActionTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntListActionTemplatesResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for actions
     * @param {module:model/EntListActionTemplatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntListActionTemplatesResponse}
     */
    listActionTemplates(body) {
      return this.listActionTemplatesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDocTemplatesResponse} and HTTP response
     */
    listDocTemplatesWithHttpInfo(type) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listDocTemplates");
      }

      let pathParams = {
        'Type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntDocTemplatesResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/docs/{Type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDocTemplatesResponse}
     */
    listDocTemplates(type) {
      return this.listDocTemplatesWithHttpInfo(type)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for Jobs
     * @param {module:model/EntListJobTemplatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntListJobTemplatesResponse} and HTTP response
     */
    listJobTemplatesWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listJobTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntListJobTemplatesResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for Jobs
     * @param {module:model/EntListJobTemplatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntListJobTemplatesResponse}
     */
    listJobTemplates(body) {
      return this.listJobTemplatesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for filters
     * @param {module:model/EntListSelectorTemplatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntListSelectorTemplatesResponse} and HTTP response
     */
    listSelectorTemplatesWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listSelectorTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntListSelectorTemplatesResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/selectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for filters
     * @param {module:model/EntListSelectorTemplatesRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntListSelectorTemplatesResponse}
     */
    listSelectorTemplates(body) {
      return this.listSelectorTemplatesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for actions
     * @param {module:model/EntPutActionTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntPutActionTemplateResponse} and HTTP response
     */
    putActionTemplateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putActionTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntPutActionTemplateResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/actions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for actions
     * @param {module:model/EntPutActionTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntPutActionTemplateResponse}
     */
    putActionTemplate(body) {
      return this.putActionTemplateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Put a job in the scheduler
     * @param {module:model/JobsPutJobRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobsPutJobResponse} and HTTP response
     */
    putJobWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobsPutJobResponse;
      return this.apiClient.callApi(
        '/scheduler/jobs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * [Enterprise Only] Put a job in the scheduler
     * @param {module:model/JobsPutJobRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JobsPutJobResponse}
     */
    putJob(body) {
      return this.putJobWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for Jobs
     * @param {String} name 
     * @param {module:model/EntPutJobTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntPutJobTemplateResponse} and HTTP response
     */
    putJobTemplateWithHttpInfo(name, body) {
      let postBody = body;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling putJobTemplate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putJobTemplate");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntPutJobTemplateResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/jobs/{Name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for Jobs
     * @param {String} name 
     * @param {module:model/EntPutJobTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntPutJobTemplateResponse}
     */
    putJobTemplate(name, body) {
      return this.putJobTemplateWithHttpInfo(name, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Templates management for filters
     * @param {module:model/EntPutSelectorTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntPutSelectorTemplateResponse} and HTTP response
     */
    putSelectorTemplateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSelectorTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntPutSelectorTemplateResponse;
      return this.apiClient.callApi(
        '/scheduler/templates/selectors', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Templates management for filters
     * @param {module:model/EntPutSelectorTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntPutSelectorTemplateResponse}
     */
    putSelectorTemplate(body) {
      return this.putSelectorTemplateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
