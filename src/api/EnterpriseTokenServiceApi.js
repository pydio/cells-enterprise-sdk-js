/**
 * Pydio Cells Enterprise Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthPatListResponse from '../model/AuthPatListResponse';
import EntListAccessTokensRequest from '../model/EntListAccessTokensRequest';
import EntPersonalAccessTokenRequest from '../model/EntPersonalAccessTokenRequest';
import EntPersonalAccessTokenResponse from '../model/EntPersonalAccessTokenResponse';
import RestRevokeResponse from '../model/RestRevokeResponse';

/**
* EnterpriseTokenService service.
* @module api/EnterpriseTokenServiceApi
* @version 2.0
*/
export default class EnterpriseTokenServiceApi {

    /**
    * Constructs a new EnterpriseTokenServiceApi. 
    * @alias module:api/EnterpriseTokenServiceApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Generate a personal access token
     * @param {module:model/EntPersonalAccessTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntPersonalAccessTokenResponse} and HTTP response
     */
    generatePersonalAccessTokenWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling generatePersonalAccessToken");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntPersonalAccessTokenResponse;

      return this.apiClient.callApi(
        '/auth/token/personal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate a personal access token
     * @param {module:model/EntPersonalAccessTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntPersonalAccessTokenResponse}
     */
    generatePersonalAccessToken(body) {
      return this.generatePersonalAccessTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate a personal access token
     * @param {module:model/EntPersonalAccessTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntPersonalAccessTokenResponse} and HTTP response
     */
    impersonatePersonalAccessTokenWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling impersonatePersonalAccessToken");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntPersonalAccessTokenResponse;

      return this.apiClient.callApi(
        '/auth/token/impersonate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate a personal access token
     * @param {module:model/EntPersonalAccessTokenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntPersonalAccessTokenResponse}
     */
    impersonatePersonalAccessToken(body) {
      return this.impersonatePersonalAccessTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List generated personal access tokens, eventually filtering by user
     * @param {module:model/EntListAccessTokensRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthPatListResponse} and HTTP response
     */
    listPersonalAccessTokensWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listPersonalAccessTokens");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthPatListResponse;

      return this.apiClient.callApi(
        '/auth/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List generated personal access tokens, eventually filtering by user
     * @param {module:model/EntListAccessTokensRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthPatListResponse}
     */
    listPersonalAccessTokens(body) {
      return this.listPersonalAccessTokensWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a personal access token based on its Uuid
     * @param {String} tokenId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestRevokeResponse} and HTTP response
     */
    revokePersonalAccessTokenWithHttpInfo(tokenId) {
      let postBody = null;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling revokePersonalAccessToken");
      }


      let pathParams = {
        'TokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestRevokeResponse;

      return this.apiClient.callApi(
        '/auth/tokens/{TokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a personal access token based on its Uuid
     * @param {String} tokenId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestRevokeResponse}
     */
    revokePersonalAccessToken(tokenId) {
      return this.revokePersonalAccessTokenWithHttpInfo(tokenId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
