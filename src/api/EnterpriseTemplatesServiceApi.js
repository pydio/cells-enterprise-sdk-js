/**
 * Pydio Cells Enterprise Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntCreateNodeTemplateRequest from '../model/EntCreateNodeTemplateRequest';
import EntCreateNodeTemplateResponse from '../model/EntCreateNodeTemplateResponse';
import EntDeleteMetaTemplateResponse from '../model/EntDeleteMetaTemplateResponse';
import EntDeleteNodeTemplateResponse from '../model/EntDeleteNodeTemplateResponse';
import EntListMetaTemplateResponse from '../model/EntListMetaTemplateResponse';
import EntPutMetaTemplateRequest from '../model/EntPutMetaTemplateRequest';
import EntPutMetaTemplateResponse from '../model/EntPutMetaTemplateResponse';
import RpcStatus from '../model/RpcStatus';

/**
* EnterpriseTemplatesService service.
* @module api/EnterpriseTemplatesServiceApi
* @version 2.0
*/
export default class EnterpriseTemplatesServiceApi {

    /**
    * Constructs a new EnterpriseTemplatesServiceApi. 
    * @alias module:api/EnterpriseTemplatesServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a template from a specific node
     * @param {module:model/EntCreateNodeTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntCreateNodeTemplateResponse} and HTTP response
     */
    createNodeTemplateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNodeTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntCreateNodeTemplateResponse;
      return this.apiClient.callApi(
        '/templates/node', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a template from a specific node
     * @param {module:model/EntCreateNodeTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntCreateNodeTemplateResponse}
     */
    createNodeTemplate(body) {
      return this.createNodeTemplateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an arbitrary metadata template
     * @param {String} templateUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDeleteMetaTemplateResponse} and HTTP response
     */
    deleteMetaTemplateWithHttpInfo(templateUuid) {
      let postBody = null;
      // verify the required parameter 'templateUuid' is set
      if (templateUuid === undefined || templateUuid === null) {
        throw new Error("Missing the required parameter 'templateUuid' when calling deleteMetaTemplate");
      }

      let pathParams = {
        'TemplateUuid': templateUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntDeleteMetaTemplateResponse;
      return this.apiClient.callApi(
        '/templates/meta/{TemplateUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an arbitrary metadata template
     * @param {String} templateUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDeleteMetaTemplateResponse}
     */
    deleteMetaTemplate(templateUuid) {
      return this.deleteMetaTemplateWithHttpInfo(templateUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a template from a specific node
     * @param {String} templateUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntDeleteNodeTemplateResponse} and HTTP response
     */
    deleteNodeTemplateWithHttpInfo(templateUuid) {
      let postBody = null;
      // verify the required parameter 'templateUuid' is set
      if (templateUuid === undefined || templateUuid === null) {
        throw new Error("Missing the required parameter 'templateUuid' when calling deleteNodeTemplate");
      }

      let pathParams = {
        'TemplateUuid': templateUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntDeleteNodeTemplateResponse;
      return this.apiClient.callApi(
        '/templates/node/{TemplateUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a template from a specific node
     * @param {String} templateUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntDeleteNodeTemplateResponse}
     */
    deleteNodeTemplate(templateUuid) {
      return this.deleteNodeTemplateWithHttpInfo(templateUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Store an arbitrary metadata template
     * @param {Object} opts Optional parameters
     * @param {String} opts.namespace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntListMetaTemplateResponse} and HTTP response
     */
    listMetaTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Namespace': opts['namespace']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntListMetaTemplateResponse;
      return this.apiClient.callApi(
        '/templates/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Store an arbitrary metadata template
     * @param {Object} opts Optional parameters
     * @param {String} opts.namespace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntListMetaTemplateResponse}
     */
    listMetaTemplates(opts) {
      return this.listMetaTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Store an arbitrary metadata template
     * @param {module:model/EntPutMetaTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntPutMetaTemplateResponse} and HTTP response
     */
    putMetaTemplateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putMetaTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntPutMetaTemplateResponse;
      return this.apiClient.callApi(
        '/templates/meta', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Store an arbitrary metadata template
     * @param {module:model/EntPutMetaTemplateRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntPutMetaTemplateResponse}
     */
    putMetaTemplate(body) {
      return this.putMetaTemplateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
