/**
 * Pydio Cells Enterprise Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertLicenseStatsResponse from '../model/CertLicenseStatsResponse';
import CertPutLicenseInfoRequest from '../model/CertPutLicenseInfoRequest';
import CertPutLicenseInfoResponse from '../model/CertPutLicenseInfoResponse';

/**
* LicenseService service.
* @module api/LicenseServiceApi
* @version 2.0
*/
export default class LicenseServiceApi {

    /**
    * Constructs a new LicenseServiceApi. 
    * @alias module:api/LicenseServiceApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * [Enterprise Only] Display statistics about licenses usage
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.forceRefresh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CertLicenseStatsResponse} and HTTP response
     */
    licenseStatsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'ForceRefresh': opts['forceRefresh']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertLicenseStatsResponse;

      return this.apiClient.callApi(
        '/license/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Display statistics about licenses usage
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.forceRefresh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CertLicenseStatsResponse}
     */
    licenseStats(opts) {
      return this.licenseStatsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Update License String
     * @param {module:model/CertPutLicenseInfoRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CertPutLicenseInfoResponse} and HTTP response
     */
    putLicenseInfoWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putLicenseInfo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertPutLicenseInfoResponse;

      return this.apiClient.callApi(
        '/license/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Update License String
     * @param {module:model/CertPutLicenseInfoRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CertPutLicenseInfoResponse}
     */
    putLicenseInfo(body) {
      return this.putLicenseInfoWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
